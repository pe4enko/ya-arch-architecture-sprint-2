name: sharding-repl-cache
services:
  pymongo_api:
    container_name: pymongo_api
    build: 
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - configSrv
      - shard1-1
      - shard1-2
      - shard1-3
      - shard2-1
      - shard2-2
      - shard2-3
      - mongos_router
      - redis_1
      - redis_2
      - redis_3
      - redis_4
      - redis_5
      - redis_6
    ports:
      - 8080:8080
    networks:
      app-network:
        ipv4_address: 173.17.0.100
    environment:
      MONGODB_URL: "mongodb://mongos_router:27017"
      MONGODB_DATABASE_NAME: "somedb"
#      REDIS_URL: "redis://redis_1:6379,redis_2:6379,redis_3:6379,redis_4:6379,redis_5:6379,redis_6:6379"
      REDIS_URL: "redis://redis_1:6379"

  configSrv:
    image: mongo:7.0.14
    container_name: configSrv
    restart: always
    ports:
      - "27020:27020"
    networks:
      app-network:
        ipv4_address: 173.17.0.10
    volumes:
      - config-data:/data/db
      - ./scripts:/scripts
    command:
      [
        "--configsvr",
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27020"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--port", "27020", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1-1:
    image: mongo:7.0.14
    container_name: shard1-1
    restart: always
    ports:
      - "27018:27018"
    networks:
      app-network:
        ipv4_address: 173.17.0.9
    volumes:
      - shard1-1-data:/data/db
      - ./scripts:/scripts
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard1ReplSet",
        "--bind_ip_all",
        "--port",
        "27018"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--port", "27018", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1-2:
    image: mongo:7.0.14
    container_name: shard1-2
    restart: always
#    ports:
#      - "27018:27018"
    networks:
      app-network:
        ipv4_address: 173.17.0.19
    volumes:
      - shard1-2-data:/data/db
      - ./scripts:/scripts
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard1ReplSet",
        "--bind_ip_all",
        "--port",
        "27018"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--port", "27018", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1-3:
    image: mongo:7.0.14
    container_name: shard1-3
    restart: always
    #    ports:
    #      - "27018:27018"
    networks:
      app-network:
        ipv4_address: 173.17.0.29
    volumes:
      - shard1-3-data:/data/db
      - ./scripts:/scripts
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard1ReplSet",
        "--bind_ip_all",
        "--port",
        "27018"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--port", "27018", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2-1:
    image: mongo:7.0.14
    container_name: shard2-1
    restart: always
    ports:
      - "27019:27019"
    networks:
      app-network:
        ipv4_address: 173.17.0.8
    volumes:
      - shard2-1-data:/data/db
      - ./scripts:/scripts
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard2ReplSet",
        "--bind_ip_all",
        "--port",
        "27019"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--port", "27019", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2-2:
    image: mongo:7.0.14
    container_name: shard2-2
    restart: always
#    ports:
#      - "27019:27019"
    networks:
      app-network:
        ipv4_address: 173.17.0.18
    volumes:
      - shard2-2-data:/data/db
      - ./scripts:/scripts
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard2ReplSet",
        "--bind_ip_all",
        "--port",
        "27019"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--port", "27019", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2-3:
    image: mongo:7.0.14
    container_name: shard2-3
    restart: always
#    ports:
#      - "27019:27019"
    networks:
      app-network:
        ipv4_address: 173.17.0.28
    volumes:
      - shard2-3-data:/data/db
      - ./scripts:/scripts
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard2ReplSet",
        "--bind_ip_all",
        "--port",
        "27019"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--port", "27019", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  mongos_router:
    image: mongo:7.0.14
    container_name: mongos_router
    restart: always
    ports:
      - "27017:27017"
    networks:
      app-network:
        ipv4_address: 173.17.0.17
    volumes:
      - ./scripts:/scripts
    command:
      [
        "mongos",
        "--configdb",
        "config_server/configSrv:27020",
        "--bind_ip_all",
        "--port",
        "27017"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--port", "27017", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  redis_1:
    image: "redis:7.4.0"
    container_name: redis_1
    ports:
      - "6379"
    volumes:
      - redis_1_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    networks:
      app-network:
        ipv4_address: 173.17.0.2

  redis_2:
    image: "redis:7.4.0"
    container_name: redis_2
    ports:
      - "6379"
    volumes:
      - redis_2_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    networks:
      app-network:
        ipv4_address: 173.17.0.3

  redis_3:
    image: "redis:7.4.0"
    container_name: redis_3
    ports:
      - "6379"
    volumes:
      - redis_3_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    networks:
      app-network:
        ipv4_address: 173.17.0.4

  redis_4:
    image: "redis:7.4.0"
    container_name: redis_4
    ports:
      - "6379"
    volumes:
      - redis_4_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    networks:
      app-network:
        ipv4_address: 173.17.0.5

  redis_5:
    image: "redis:7.4.0"
    container_name: redis_5
    ports:
      - "6379"
    volumes:
      - redis_5_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    networks:
      app-network:
        ipv4_address: 173.17.0.6

  redis_6:
    image: "redis:7.4.0"
    container_name: redis_6
    ports:
      - "6379"
    volumes:
      - redis_6_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    networks:
      app-network:
        ipv4_address: 173.17.0.7

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.17.0.0/16

volumes:
  config-data:
  shard1-1-data:
  shard1-2-data:
  shard1-3-data:
  shard2-1-data:
  shard2-2-data:
  shard2-3-data:
  redis_1_data: {}
  redis_2_data: {}
  redis_3_data: {}
  redis_4_data: {}
  redis_5_data: {}
  redis_6_data: {}